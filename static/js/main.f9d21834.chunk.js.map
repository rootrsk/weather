{"version":3,"sources":["component/App.js","serviceWorker.js","index.js"],"names":["RenderTemp","props","icon","weather","className","place_name","id","Math","floor","main","temp","src","alt","description","toUpperCase","console","log","App","useState","address","setAddress","setWeather","buttonStatus","setButtonStatus","searchButtonHandler","e","a","url","encodeURIComponent","GeoCodeUrl","Axios","method","response","data","features","latitude","center","longitude","OpenWeatherMapUrl","weather_response","useEffect","document","getElementById","innerHTML","onChange","target","value","defaultValue","placeholder","onKeyPress","key","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6QAsFA,IAAMA,EAAa,SAACC,GAEhB,IAAMC,EAAOD,EAAME,QAAQA,QAAQA,QAAQ,GAAGD,KAC9C,OACI,yBAAKE,UAAU,oBAEX,yBAAKA,UAAU,oBACX,2BAAIH,EAAME,QAAQE,aAGtB,yBAAKD,UAAU,gBACX,yBAAKA,UAAU,QACX,wBAAIE,GAAG,QAAQC,KAAKC,MAAMP,EAAME,QAAQA,QAAQM,KAAKC,KAAK,KAA1D,WAEJ,yBAAKN,UAAU,QACX,yBAAKO,IAAG,2CAAsCT,EAAtC,WAAqDU,IAAI,WAKzE,yBAAKR,UAAU,iBACX,2BAAIH,EAAME,QAAQA,QAAQA,QAAQ,GAAGU,YAAYC,gBAIpDC,QAAQC,IAAIf,EAAME,WAMhBc,EA/Gf,WAAgB,IAAD,EAEmBC,mBAAS,IAF5B,mBAEJC,EAFI,KAEKC,EAFL,OAGkBF,mBAAS,IAH3B,mBAGJf,EAHI,KAGIkB,EAHJ,OAI6BH,mBAAS,aAJtC,mBAIJI,EAJI,KAIUC,EAJV,KAULC,EAAmB,uCAAG,WAAOC,GAAP,6BAAAC,EAAA,yDACpBP,EADoB,uBAEpBI,EAAgB,4BAFI,iCAKxBA,EAAgB,wBACVI,EAnBK,qDAmBcC,mBAAmBT,GAAhCU,uHANY,SAODC,IAAM,CACzBH,IAAIA,EACJI,OAAQ,QATY,cAOlBC,EAPkB,0CAalB3B,EAAa2B,EAASC,KAAKC,SAAS,GAAG7B,WACvC8B,EAAWH,EAASC,KAAKC,SAAS,GAAGE,OAAO,GAC5CC,EAAYL,EAASC,KAAKC,SAAS,GAAGE,OAAO,GAC7CE,EAhBkB,8DAgByDH,EAhBzD,gBAgByEE,EAhBzE,gEAiBOP,IAAM,CACjCH,IAAIW,IAlBgB,eAiBlBC,EAjBkB,OAqBlBpC,EAAU,CACZE,aACAF,QAAUoC,EAAiBN,MAE/BZ,EAAWlB,GACXoB,EAAgB,aA1BQ,+DAAH,sDAoCzB,OAJAiB,qBAAU,WACNC,SAASC,eAAe,QAAQC,UAAYrB,IAE7C,CAACA,IAEA,yBAAKlB,UAAU,QACX,uCACA,yBAAKA,UAAU,UACX,2BACIwC,SA7CW,SAACnB,GACxBL,EAAWK,EAAEoB,OAAOC,QA6CRC,aAAc5B,EACd6B,YAAY,iBACZC,WAAY,SAACxB,GACLN,GAASI,EAAgB,aAClB,UAARE,EAAEyB,KAAe1B,OAG5B,yBAAKpB,UAAU,eACX,uBAAGE,GAAG,QAAN,IAAegB,EAAf,KACA,4BACI6B,QAAS3B,EACTpB,UAAU,UAFd,YAWR,yBAAKA,UAAU,eACVD,EAAQ,kBAAC,EAAD,CAAYA,QAASA,IAAa,QCnEvCiD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFlB,SAASC,eAAe,SDyHpB,kBAAmBkB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpD,QAAQoD,MAAMA,EAAMC,c","file":"static/js/main.f9d21834.chunk.js","sourcesContent":["import React, { useState ,useEffect} from 'react'\r\nimport Axios from 'axios'\r\n\r\nconst GeoCodeUrl = 'https://api.mapbox.com/geocoding/v5/mapbox.places/'\r\nconst ApiKey = 'access_token=pk.eyJ1Ijoicm9vdHJzayIsImEiOiJjazVnOWRqeDAwNTFxM2RwYmptcWJmYnBpIn0.VeWzTx2FJA6zIbjDDmfbYQ&limit=1'\r\n\r\nfunction App() {\r\n\r\n    const [address, setAddress] = useState('')\r\n    const [weather,setWeather] = useState('')\r\n    const [buttonStatus, setButtonStatus] = useState('&#128512;')\r\n    \r\n    const adressInputHandler = (e) =>{\r\n        setAddress(e.target.value)\r\n\r\n    }\r\n    const searchButtonHandler = async (e) =>{\r\n        if(!address){\r\n            setButtonStatus(\"Enter Location &#128519;\");\r\n            return\r\n        }\r\n        setButtonStatus(\"Loading... &#129488;\");\r\n        const url = GeoCodeUrl + encodeURIComponent(address) + '.json?'+ApiKey\r\n        const response = await Axios({\r\n            url:url,\r\n            method: 'get',\r\n            \r\n        })\r\n        const APIKEY = `a2344865c9890e3fd12f284af2ec6a65`\r\n        const place_name = response.data.features[0].place_name\r\n        const latitude = response.data.features[0].center[1]\r\n        const longitude = response.data.features[0].center[0]\r\n        const OpenWeatherMapUrl = `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${APIKEY}`\r\n        const weather_response = await Axios({\r\n            url:OpenWeatherMapUrl\r\n        })\r\n\r\n        const weather = {\r\n            place_name,\r\n            weather : weather_response.data\r\n        }\r\n        setWeather(weather)\r\n        setButtonStatus('&#128526;')\r\n        return\r\n    }\r\n    \r\n    \r\n    \r\n    useEffect(() => {\r\n        document.getElementById('load').innerHTML = buttonStatus\r\n        \r\n    }, [buttonStatus]);\r\n    return (\r\n        <div className='main'>\r\n            <h1>Weather</h1>\r\n            <div className='search'>\r\n                <input \r\n                    onChange={adressInputHandler}\r\n                    defaultValue={address}\r\n                    placeholder='Enter Location'\r\n                    onKeyPress={(e)=>{\r\n                        if (address) setButtonStatus('&#128521;')\r\n                        if(e.key==='Enter') searchButtonHandler()\r\n                    }}\r\n                />\r\n                <div className=\"button_prop\">\r\n                    <p id='load'> {buttonStatus} </p>\r\n                    <button \r\n                        onClick={searchButtonHandler}\r\n                        className='button'>\r\n                        Search\r\n                    </button>\r\n\r\n\r\n                </div>\r\n                \r\n            </div>\r\n            \r\n            <div className='weather_div'> \r\n                {weather?<RenderTemp weather={weather} /> :null}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst RenderTemp = (props) =>{\r\n\r\n    const icon = props.weather.weather.weather[0].icon\r\n    return(\r\n        <div className=\"weathers_details\">\r\n\r\n            <div className=\"location_details\">\r\n                <p>{props.weather.place_name}</p>\r\n\r\n            </div>\r\n            <div className=\"main_details\">\r\n                <div className='temp'>\r\n                    <h1 id='temp'>{Math.floor(props.weather.weather.main.temp-273)}&#8451;</h1>\r\n                </div>\r\n                <div className='icon'>\r\n                    <img src={`http://openweathermap.org/img/wn/${icon}@2x.png`} alt='icon' />\r\n\r\n                </div>\r\n\r\n            </div>  \r\n            <div className=\"other_details\">\r\n                <p>{props.weather.weather.weather[0].description.toUpperCase()}</p>\r\n\r\n            </div>\r\n\r\n            {console.log(props.weather)}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './component/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}